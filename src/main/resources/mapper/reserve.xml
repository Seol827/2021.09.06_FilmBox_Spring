<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.film.mapper.ReserveMapper">

		
	<insert id="reserveinsert" parameterType="com.film.dto.KakaopayDTO">
    	<selectKey keyProperty="rev_no" resultType="int" order="AFTER">
       		SELECT LAST_INSERT_ID() 
    	</selectKey>
    	insert into filmbox_rev (member_id, movieCd, rev_date, price, rev_condition) 
    	values (#{member_id}, #{movieCd},now(), #{payMoney} ,0)
    </insert>
    <insert id="screeninsert" parameterType="com.film.dto.ScreenDTO">
    	
    	insert into filmbox_screen (rev_no,show_date, show_time, seats) 
    	
    	values (#{rev_no},#{reserveDate}, #{screenTime},#{seats})
    </insert>
    
    <!-- <insert id="screeninsert" parameterType="java.util.List">
		insert into filmbox_screen (rev_no,show_date, show_time, seatno) 
		values
		<foreach item="item" index="index" collection="list"
			separator=" , ">
			(#{rev_no},#{reserveDate}, #{screenTime},#{seats})
		</foreach>
	</insert> -->
	
		<!-- 해당멤버가 해당 movieCd의 예약번호가 존재하는지 (=영화리뷰 쓸 수 있는지) = 예약테이블에서 -->
	<select id="isRevNo" parameterType="com.film.dto.ReviewDTO" resultType="Integer">	 <!-- 파라미터 타입 id 생기면 kakaoDTO로 바꾸기 -->	
		select rev_no
		from filmbox_rev
		where member_id = #{member_id} and movieCd = ${movieCd} and rev_condition = 1
		order by rev_no
		Limit 1
	</select>
	
	<select id="getseats" parameterType="com.film.dto.KakaopayDTO" resultType="com.film.dto.ScreenDTO">
		
		select fs.seats FROM filmbox_movie fm
		INNER JOIN filmbox_rev fr ON fm.movieCd = fr.movieCd
		INNER JOIN filmbox_screen fs ON fr.rev_no = fs.rev_no
		WHERE fs.show_date =#{reserveDate} AND fs.show_time=#{screenTime}
			AND fm.movieCd=#{movieCd}
	</select>
	
	<!-- 예매취소 rev_condition 2 -->
	<update id="reserveCancel" parameterType="int">
		update filmbox_rev
		set
			rev_condition = 2
		where rev_no = #{rev_no}
	</update>
	
	<!-- 날짜 지나면 rev_condition 1 -->
	<select id="selectPast" resultType="java.util.HashMap">
	  select e.rev_no
		from (   
		        select distinct rev_no, show_time
				from filmbox_screen
				where
				 show_date <![CDATA[<=]]> DATE(NOW()) and rev_condition = 0
		 )e
		where e.show_time <![CDATA[<=]]> DATE_ADD(TIME(NOW()), INTERVAL 9 hour)
		
	</select >
	<update id="updateCondition" parameterType="java.util.List">
			update filmbox_rev
			set rev_condition = 1
			where rev_no in
		<foreach collection="list"  item="item" index="index" open="(" close=")" separator=",">
			#{item.rev_no}
		</foreach>
	</update>
	
	<select id="getMovieList" resultType="com.film.dto.MovieDTO">
		SELECT movieNm, image
		FROM filmbox_movie
		ORDER BY update_date DESC, rank * 1
		LIMIT 10;
		
	</select>
	
	
	<select id="getmoviecd" resultType="com.film.dto.KakaopayDTO" parameterType="com.film.dto.KakaopayDTO">
		SELECT movieCd, movieNm FROM filmbox_movie
		where movieNm=#{selectmovie};
		
	</select>
	
	<select id="getRevData" resultType="com.film.dto.KakaopayDTO" parameterType="int">
		select member_id, movieCd, price as payMoney
		from filmbox_rev
		where rev_no = #{rev_no}
	</select>

</mapper>
    
    