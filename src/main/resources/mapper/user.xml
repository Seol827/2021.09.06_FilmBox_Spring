<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.film.mapper.UserMapper">

<insert id="insertUser" parameterType="com.film.dto.UserDTO">

        insert into filmbox_member ( member_id
        						, member_name
        						, member_pwd
        						, member_phone
        						, email
        						, point
        						, login_type )
        select #{member_id}
         		, #{member_name}
         		, #{member_pwd}
         		, #{member_phone}
         		, #{email}
         		, '0'
         		, 'SNS' from dual
        where not exists ( select member_id from filmbox_member
        					 where member_id=#{member_id} )
           
</insert>

<!-- 홈페이지 회원가입 user -> 3000 포인트 지급 -->
<insert id="insertFilmUser" parameterType="com.film.dto.UserDTO">
		insert into filmbox_member  ( member_id
								, member_name
								, member_pwd
								, member_phone
								, email
								, point
								, login_type ) 
         select  #{member_id}
         		 , #{member_name}
         		 , #{member_pwd}
         		 , #{member_phone}
         		 , #{email}
         		 , '3000'
         		 , 'R' from dual
         where not exists ( select member_id from filmbox_member
         					 where member_id=#{member_id} )
        
</insert>

<select id="idcheck" resultType="int">
	select count(*)
	from filmbox_member
	where member_id=#{member_id}
</select>

<select id="pwdcheck" resultType="int" parameterType="com.film.dto.UserDTO">
	select count(*)
	from filmbox_member
	where member_id=#{member_id} and member_pwd=#{member_pwd}
</select>

<select id="finduserid" resultType="String">
	select member_id
	from filmbox_member
	where email=#{email}
</select>

<update id="updatepwd" parameterType="com.film.dto.UserDTO">
	update filmbox_member
	set
		member_pwd=#{member_pwd}
	where member_id=#{member_id}
</update>

<select id="getUser" resultType="String" parameterType="com.film.dto.UserDTO">
	select member_id
	from filmbox_member
	where member_id=#{member_id} and member_pwd=#{member_pwd}
</select>

<select id="userDetail" resultType="com.film.dto.UserDTO" parameterType="String">
	select  member_id, member_name, member_pwd, member_phone, email, point, login_type 
	from filmbox_member
	where member_id=#{member_id}
</select>

<update id="updateUser" parameterType="com.film.dto.UserDTO">
	update filmbox_member
	set  member_id = #{member_id}
		, member_name = #{member_name}
		, member_pwd = #{member_pwd}
		, member_phone = #{member_phone}
		, email = #{email}
	where member_id=#{member_id}
</update>

<delete id="deleteUser" parameterType="String">
	delete from filmbox_member
	where member_id=#{member_id}
</delete>

<select id="emailcheck" resultType="int">
	select count(*)
	from filmbox_member
	where email=#{email}
</select>

<!-- 마이페이지/필름스토리 -->
<select id="getMyfilmData" parameterType="String" resultType="com.film.dto.MypageDTO">
	select rev.rev_no, m.image, m.movieNm
			, s.show_date, s.show_time
			, r.review_starpoint, r.review_content
	from filmbox_rev as rev join filmbox_screen as s
	  on rev.rev_no =  s.rev_no
		left join filmbox_review as r
	  on rev.rev_no = r.rev_no
	  	join filmbox_movie as m
	  on r.movieCd = m.movieCd
	where rev.member_id = #{member_id}
	order by rev_date DESC
</select>

</mapper>