<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.film.mapper.UserMapper">

<insert id="insertUser" parameterType="com.film.dto.UserDTO">

        insert into filmbox_member ( member_id
        						, member_name
        						, member_pwd
        						, member_phone
        						, email
        						, point
        						, login_type )
        select #{member_id}
         		, #{member_name}
         		, #{member_pwd}
         		, #{member_phone}
         		, #{email}
         		, 0
         		, #{login_type}
        where not exists ( select member_id from filmbox_member
        					 where member_id=#{member_id} )
           
</insert>

<select id="idcheck" resultType="int">
	select count(*)
	from filmbox_member
	where member_id=#{member_id}
</select>

<select id="finduserid" resultType="String">
	select member_id
	from filmbox_member
	where email=#{email}
</select>

<update id="updatepwd" parameterType="com.film.dto.UserDTO">
	update filmbox_member
	set
		member_pwd=#{member_pwd}
	where member_id=#{member_id}
</update>

<select id="getUser" resultType="com.film.dto.UserDTO" parameterType="com.film.dto.UserDTO">
	select member_id, member_pwd
	from filmbox_member
	where member_id=#{member_id}
</select>

<select id="userDetail" resultType="com.film.dto.UserDTO" parameterType="String">
	select  member_id, member_name, member_pwd, member_phone, email, point, login_type 
	from filmbox_member
	where member_id=#{member_id}
</select>

<update id="updateUser" parameterType="com.film.dto.UserDTO">
	update filmbox_member
	set  member_id = #{member_id}
		, member_name = #{member_name}
		, member_pwd = #{member_pwd}
		, member_phone = #{member_phone}
		, email = #{email}
	where member_id=#{member_id}
</update>

<delete id="deleteUser" parameterType="String">
	delete from filmbox_member
	where member_id=#{member_id}
</delete>

<select id="emailcheck" resultType="int">
	select count(*)
	from filmbox_member
	where email=#{email}
</select>

<!-- 마이페이지 필름스토리  -->
<select id="getMyfilmData" parameterType="String" resultType="com.film.dto.MypageDTO">
	SELECT fme.member_id, fr.rev_no, fr.movieCd, fr.rev_condition, fm.movieNm, fs.show_date, fs.show_time, GROUP_CONCAT(fs.seats) as seats
   			, fm.image, frv.review_starpoint, frv.review_content, frv.review_date
	FROM filmbox_member fme
	INNER JOIN filmbox_rev fr ON fme.member_id = fr.member_id
	INNER JOIN filmbox_screen fs ON fr.rev_no = fs.rev_no
	INNER JOIN filmbox_movie fm ON fr.movieCd = fm.movieCd
	LEFT OUTER JOIN filmbox_review frv ON fr.rev_no = frv.rev_no
	WHERE fme.member_id = #{member_id} AND fr.rev_condition = 1
	GROUP BY fr.rev_no
	order by fr.rev_no desc
</select>

<!-- 마이페이지 메인 MY예매내역 -->
<select id="getRsvData" parameterType="String" resultType="com.film.dto.MypageDTO">
	SELECT fme.member_id, fr.rev_no, fr.movieCd, fr.rev_condition, fm.movieNm, fs.show_date, fs.show_time, GROUP_CONCAT(fs.seats) as seats
   			, fm.image
	FROM filmbox_member fme
	INNER JOIN filmbox_rev fr ON fme.member_id = fr.member_id
	INNER JOIN filmbox_screen fs ON fr.rev_no = fs.rev_no
	INNER JOIN filmbox_movie fm ON fr.movieCd = fm.movieCd
	WHERE fme.member_id = #{member_id} AND fr.rev_condition = 0
	GROUP BY fr.rev_no
	order by fr.rev_no desc
</select>

<!-- 내 포인트 합계 -->
   <update id="updateMyPoint" parameterType="string">
      update filmbox_member as m inner join
              (select member_id, sum(point) as pointSum
               from filmbox_point
             where member_id = #{member_id} )
           as p
        on m.member_id = p.member_id
        set m.point = pointSum
        where m.member_id = #{member_id}
   </update> 
   
<!-- 영화 포스터 불러오기 -->
<select id="getPoster" parameterType="String" resultType="String">
	select image
	from filmbox_movie
	where movieNm = #{movieNm}
</select>

</mapper>